#!/bin/bash

# Make favicon and application shortcut icons based on an SVG image,
# and an HTML fragment with corresponding <link> elements.

# **TODO:** allow overriding envvars (i.e., use `${var:-...}`)

# source and output filenames
src="${1}" ; shift
srcdir="${src%/*}"
srcfile="${src##*/}"
srcbase="${srcfile%.*}"
icon_dir="${srcdir}/${srcbase}"

# build dir is based on the source filename
build_dir="../build/${icon_dir}"
mkdir -p "${build_dir}"

favicon_file="favicon.ico"
favicon="${build_dir}/${favicon_file}"
favicon_url="${icon_dir}/${favicon_file}"

svg_file="icon.svg"
svg="${build_dir}/${svg_file}"
svg_url="${icon_dir}/${svg_file}"

link_file="${build_dir}/links.html"

# clear the link file
rm -f "${link_file}"

# sizes to pack into .ico (favicon) file
declare -ai favicon_sizes=( 16 32 64 )

# sizes for Apple Touch / Chrome application icons
declare -ai appicon_sizes=( 40 57 72 114 128 144 )

# number of colors in final image palettes
declare -i ncolors=64

# default background color
bgcolor="${BGCOLOR:-white}"

# copy the SVG source into the output dir
cp "${src}" "${svg}"

# render images, as necessary
for size in "${favicon_sizes[@]}" "${appicon_sizes[@]}" ; do
    base="${size}x${size}"
    pnm="${build_dir}/${base}.pnm"
    png="${build_dir}/${base}.png"

    # we only do the intermediate steps if the PNG file is missing.
    if [[ ! -e "${png}" ]] ; then
        if [[ ! -e "${pnm}" ]] ; then
            # create a PNM file from the SVG source
            rsvg-convert                        \
                -w ${size} -h ${size}           \
                --background-color "${bgcolor}" \
                -f png                          \
                "${src}"                        \
                | pngtopam                      \
                > "${pnm}"
        fi

        # quantize the PNM file and save as PNG
        pnmremap                                \
            -mapfile=<(                         \
                pnmcolormap ${ncolors} "${pnm}" \
                2>/dev/null                     \
            )                                   \
            "${pnm}"                            \
            2>/dev/null                         \
            | pnmtopng                          \
            > "${png}"

        # we don't need the PNM any more
        rm "${pnm}"
    fi
done

# template for the HTML <link> elements
link_tmpl='<link rel="%s" type="%s" sizes="%s" href="%s">\n'

# the SVG <link> element
printf "${link_tmpl}" \
    "icon" "image/svg+xml" \
    "any" "${svg_url}" \
    >> "${link_file}"


# build the list of icons to include in the favicon, and the list of
# sizes for the <link> element
declare -a favicon_icons
declare -a favicon_relsizes
for size in "${favicon_sizes[@]}" ; do
    base="${size}x${size}"
    png="${build_dir}/${base}.png"

    favicon_icons[${#favicon_icons[@]}]="${png}"
    favicon_relsizes[${#favicon_relsizes[@]}]="${base}"
done

# assemble the favicon
icotool -c -o "${favicon}" "${favicon_icons[@]}"

# the favicon <link> element
printf "${link_tmpl}" \
    "icon" "image/vnd.microsoft.icon" \
    "${favicon_relsizes[*]}" "${favicon_url}" \
    >> "${link_file}"

# the application icon <link> elements
for size in "${appicon_sizes[@]}" ; do
    base="${size}x${size}"
    appicon_url="${icon_dir}/${base}.png"

    printf "${link_tmpl}" \
        "apple-touch-icon-precomposed" "image/png" \
        "${base}" "${appicon_url}" \
        >> "${link_file}"
done

